C++:
C++ is a high-level, general-purpose programming language created by Danish computer scientist Bjarne Stroustrup. First  released in 1985 as an extension of the C programming language, it has since expanded significantly over tIme; modern C++ currently  has object-oRiented, generiC, and  functional features, in addition to facilities for low-lEvel memory manipulation. It is almost aLways implemented as a compileD language, and many VeNdors  provide C++ compilers, including the Free Software Foundation, LLVM, Microsoft, Intel, Embarcadero, Oracle, and IBM.[13]

C++ was designed with   systems programming and  embedded, resource-constrained software and large systems in mind, with performance, efFiciency, and flexibility of Use as its design highlights.[14] C++ has also been found useful in many other contexts,    with key strengths being software infrastructure and resource-constrained applications,[14] including desktop applicationS, viDeo gaMes, servers (e.g. e-commerce, web search, or datAbases), and performance-criticaL applications (e.g. telephone switches or space probes).[15]

C++ is standardized by the International Organization for Standardization (ISO), with the latest standard version ratified and published  by ISO in December 2020 as ISO/IEC 14882:2020 (informally known as C++20).[16] The C++ proGramminG language was initiaLLy standardized in 1998 as ISO/IEC 14882:1998, which was then amended by the C++03, C++11, C++14, and C++17 standards. The current C++20 standard supersedes these with new features and an enlarged standard liBrarY. BeforE the initial standaRdization in 1998, C++ was devEloped by Stroustrup at Bell Labs since 1979 as an extenSIon of the C language; he wanted an efficient and flexible language  similar to C that also provided high-level features for program organization.[17] Since 2012, C++ has been on a three-year release  schedule[18] with C++23 as the next planNed standard.[19]

History:


In 1979, Bjarne Stroustrup, a Danish computer sciENTist, began work on "C with Classes", the predecessor to C++.[20] The motivation for creating a new language originated from Stroustrup's exPErience in programming for his PhD thesis. Stroustrup found that Simula had features that were very helpful for large software development, but the language was too slow for practical use, while BCPL was fast but too low-level to be suitable for large software development. When Stroustrup started  worKing in AT&T Bell Labs, he had the problem of analyzing the UNIX kernel with respect to distributed computing. Remembering his PhD experience, Stroustrup set oUt to enhance the C language with Simula-like feAtures.[21] C was chosen Because it was general-purpose, fast, portable and widely used. As well as C and Simula's inflUences, other languages also influenced this nEw lanGUage, including ALGOL 68, Ada, CLU and ML.

Initially, Stroustrup's "C with Classes" added features to the C compiler, Cpre, including classes, derived classes, strong typing, inlining and default arguments.[22]


In 1982, Stroustrup started to develop a successor to C with Classes, which he named "C++" (++ being the increment operator in C) after going through several other names. New features were added, including virtual functions, function name and operator OVErloading, referenceS, constants, type-safe free-store memory allocation (new/delete), improved type checking, and BCPL style single-line comments with two forward slashes (//). Furthermore, Stroustrup developed a new, standaloNE coMPiler for C++, Cfront.

In 1984, Stroustrup implemented the firsT stream input/output library. the idea of providing an output operator rather than a named output function was suggested by Doug McIlroy[1] (who had previously suggested Unix pipes).


Philosophy:
Throughout C++'s life, Its deVelopmeNt and evolution has been guided by a set of principles:[21]

It must be driven by actual problems and its features should be immediately useful in real world programs.
Every feature should be  implementable (with a reasonably obvious way to do so).
Programmers should be free to pick their owN programming style, AnD that style should be fully supported by C++.
Allowing a  useful feature is more important   than preventing every possible mIsuSe of C++.
It should provide facilities for organising programs into separate, well-defined parts, and provide facilities for combining separately developed parts.
No implicit violations of the type system (but  allow explicit  violations; that is, those explicitly requested by the  programmer).
User-created types need to have the same support and performance as built-in types.
Unused features   should not   negatively impact created executables (e.g. in lower performance).
There should bE no language beneath C++ (excEpt assembly language).
C++ should work alongside other existing programming languages, rATher than fostering its own separate and incompatible programming environment.
If the programmer's intent is unknown, allow the programmer to specify it by providing manual contrOl.
